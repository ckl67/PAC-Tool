xt:xm-w/2;
z:w/(xmax-xmin+2*ma)*zoom;
xa:xt/z;
x:xa+xmax/2+xmin/2-offset;
w:solve('z=z,w)[1];
x:subst(w,x);
x:ratsimp(x);
x:expand(x);

xm:solve('x=x,xm)[1];

================================================
getHoXm(xm) := (xHmin-xHmax-2*marginx)/(2*zoom) + xm/zoomx + (xHmin+xHmax)/2 - offset 

# H is known value !!
xmH : -((xHmin+xHmax-2*h-2*offset)*zoomx*zoom+(xHmin-xHmax-2*marginx)*zoomx)/(2*zoom);

# xmH0 = xmH-Rm // xmH1 = xmH+Rm
xmH0 : xmH-Rm
xmH1 : xmH+Rm
H0:getHoXm(xmH0)
widthH : getHoXm(xmH1) - getHoXm(xmH0)


================================================

log10_yt:ym-w/2;
zoomy:w/( log10_yPmax- log10_yPmin+2* log10_marginy)*zoom;
log10_ya:- log10_yt/zoomy;
log10_y: log10_ya+ log10_yPmax/2+ log10_yPmin/2+offsety/mvoYF;
w:solve('zoomy=zoomy,w)[1];
log10_y:subst(w, log10_y);
log10_y:ratsimp(log10_y);
log10_yp :expand(log10_y);

p : exp(log10_yp * log(10))

# ln(x) = log(x in maxima)

getPLogoYm(ym) := -ym/zoomy-log10_yPmin/(2*zoom)+log10_yPmax/(2*zoom)+log10_marginy/zoom+offsety/mvoYF+log10_yPmin/2+ log10_yPmax/2
getPoYm(ym) := exp(log(10)*(-ym/zoomy-log10_yPmin/(2*zoom)+log10_yPmax/(2*zoom)+log10_marginy/zoom+offsety/mvoYF+log10_yPmin/2+log10_yPmax/2));


# Log10Pv is known value !!
# P is known value !!
# Log10Pv = log(P)/Log(10)  --> Log(P) = Log10Pv*Log(10)

ym :solve('p=p,ym)[1];
expand(ym);

ymP: -(log10_yPmin*zoomy)/(2*zoom)+(log10_yPmax*zoomy)/(2*zoom)+(log10_marginy*zoomy)/zoom-(log(P)*zoomy)/log(10)+(offsety*zoomy)/mvoYF+(log10_yPmin*zoomy)/2+(log10_yPmax*zoomy)/2
ymP: -(log10_yPmin*zoomy)/(2*zoom)+(log10_yPmax*zoomy)/(2*zoom)+(log10_marginy*zoomy)/zoom-(Log10Pv*zoomy)+(offsety*zoomy)/mvoYF+(log10_yPmin*zoomy)/2+(log10_yPmax*zoomy)/2
				
				
ymP0 : ymP+Rm

# LogP0  = getPLogoYm(ymP0)
getPLogoYm(ymP0)

(Log10Pv*zoomy-Rm)/zoomy


ymP1 : ymP-Rm
# LogP1  = getPLogoYm(ymP1)
height = getPLogoYm(ymP1) - getPLogoYm(ymP0)

(2*Rm)/zoomy



