Travailler avec Git
====================
Source : https://openclassrooms.com/courses/gerez-vos-codes-source-avec-git

Pour commencer à travailler avec Git, vous clonez un dépôt existant, 
C’est-à-dire que vous récupérez tout l’historique des changements d’un projet pour pouvoir travailler dessus

Cloner le dépot PAC-Tool
L’adresse du dépôt est :
https://github.com/ckl67/PAC-Tool.git

Pour cloner le dépôt de PAC-Tool il suffit de lancer la commande suivante :
	git clone https://github.com/ckl67/PAC-Tool.git

Cela va créer un dossier PAC-Tool et y télécharger tous les fichiers source du projet 
ainsi que l’historique de chacune de leurs modifications !

Le seul dossier un peu particulier créé par Git est un dossier .git 
(c’est un dossier caché situé à la racine du projet). 
Il contient l’historique des modifications des fichiers et la configuration de Git pour ce projet.
Mis à part ce dossier un peu « spécial », vous retrouverez tous les fichiers dans leur dernière version 
dans le dossier du projet. Ce sont eux que vous modifierez.

Vous avez sur votre disque dur tous les fichiers source du projet et vous pouvez vous amuser à les modifier 
avec un éditeur de texte (pas de panique, les changements restent sur votre ordinateur, 
vous ne risquez pas d’envoyer des bêtises et pouvez donc faire toutes les expériences que vous voulez).

Fichiers modifiés 
==================
La commande
	git status
vous indique les fichiers que vous avez modifiés récemment :

Méthode de travail
===================
Lorsqu’on travaille avec Git, on suit en général toujours les étapes suivantes :

1) modifier le code source ;
2) tester votre programme pour vérifier si cela fonctionne ;
3) faire un commit pour « enregistrer » les changements et les faire connaître à Git ;
4) recommencer à partir de l’étape 1 pour une autre modification.
C’est un ensemble de changements qui permet soit de régler un bug, soit d’ajouter une fonctionnalité.

Modifications
==============
Git vous liste tous les fichiers qui ont changé sur le disque. 
Il peut aussi bien détecter les modifications que les ajouts, les suppressions et les renommages.

Vous pouvez voir concrètement ce que vous avez changé en tapant
	git diff
	Pou quitter : q
	
	Les lignes ajoutées sont précédées d’un « + » tandis que les lignes supprimées sont précédées d’un « - ». 
	Normalement les lignes sont colorées et donc faciles à repérer.
	
Par défaut, Git affiche les modifications de tous les fichiers qui ont changé. 
Vous pouvez demander à Git d’afficher seulement les changements d’un fichier précis, comme ceci :

git diff src/...

Effectuer un commit des changements
====================================
Si les modifications vous paraissent bonnes et que vous les avez testées, il est temps de faire un commit.
Un commit avec git est local : à moins d’envoyer ce commit sur le serveur, 
personne ne sait que vous avez fait ce commit pour le moment. 
Cela a un avantage : si vous vous rendez compte que vous avez fait une erreur dans votre dernier commit, 
vous avez la possibilité de l’annuler

	git add nomfichier1 nomfichier2
pour ajouter les fichiers à la liste de ceux devant faire l’objet d’un commit, puis faire un
	git commit -a 
Puis mettre commentaire (éditeur VI, sortir à travers séquence:   Esc : wq!  )

Annuler les modifications d’un fichier avant un commit
=======================================================
Si vous avez modifié plusieurs fichiers mais que vous n’avez pas encore envoyé le commit, 
et que vous voulez restaurer un fichier tel qu’il était au dernier commit, utilisez
	git checkout nomfichier
Le fichier redeviendra comme il était lors du dernier commit.

Vérifions les logs
===================
Il est possible à tout moment de consulter l’historique des commits : ce sont les logs. 
Vous pouvez ainsi retrouver tout ce qui a été changé depuis les débuts du projet.

Lorsque vous avez effectué un commit, vous devriez donc le voir dans
	git log
	
Télécharger les nouveautés et partager votre travail
=====================================================
Pour le moment, vous avez tout effectué en local. 
Comment partager votre travail avec d'autres personnes ?

La commande
git pull
télécharge les nouveautés depuis le serveur, il est important de toujours commencer par un pull

Deux cas sont possibles :

* soit vous n’avez effectué aucune modification depuis le dernier pull, dans ce cas la mise à jour est simple 
	(on parle de mise à jour fast-forward) ;
* soit vous avez fait des commits en même temps que d’autres personnes. 
	Les changements qu’ils ont effectués sont alors fusionnés aux vôtres automatiquement.
	Si deux personnes modifient en même temps deux endroits distincts d’un même fichier, 
	les changements sont intelligemment fusionnés par Git.

	Parfois, mais cela arrive normalement rarement, deux personnes modifient la même zone de code en même temps. 
	Dans ce cas, Git dit qu’il y a un conflit car il ne peut décider quelle modification doit être conservée ; 
	il vous indique alors le nom des fichiers en conflit. 
	Ouvrez-les avec un éditeur et recherchez une ligne contenant « <<<<<<<<< ». 
	Ces symboles délimitent vos changements et ceux des autres personnes. 
	Supprimez ces symboles et gardez uniquement les changements nécessaires, 
	puis faites un nouveau commit pour enregistrer tout cela.
	
Envoyer vos commits
====================
Vous pouvez envoyer vos commits sur le serveur qui sert de point de rencontre entre les développeurs.
	git push

Travailler avec des branches
===============================

Les branches font partie du cœur même de Git et constituent un de ses principaux atouts. 
C’est un moyen de travailler en parallèle sur d’autres fonctionnalités. 
C’est comme si vous aviez quelque part une « copie » du code source du site qui vous permet de tester vos idées les plus 
folles et de vérifier si elles fonctionnent avant de les intégrer au véritable code source de votre projet.

Bien que les branches soient « la base » de Git, je n’en ai pas parlé avant pour rester simple. 
Pourtant, il faut absolument les connaître et s’en servir. 
La gestion poussée des branches de Git est la principale raison qui incite les projets à passer à Git, 
donc il vaut mieux comprendre comment ça fonctionne et en faire usage, sinon on passe vraiment à côté de quelque chose. :)

Dans Git, toutes les modifications que vous faites au fil du temps sont par défaut considérées comme appartenant 
à la branche principale appelée « master » :

Supposons que vous ayez une idée pour améliorer la gestion des erreurs dans votre programme 
mais que vous ne soyez pas sûrs qu’elle va fonctionner : 
vous voulez faire des tests, ça va vous prendre du temps, donc vous ne voulez pas que votre projet incorpore 
ces changements dans l’immédiat.

Il suffit de créer une branche, que vous nommerez par exemple « idee_gestion_erreurs », 
dans laquelle vous allez pouvoir travailler en parallèle :

À la fin, mon idée s’est révélée concluante, et j'ai décide d'intégrer les changements dans la branche principale « master ». 
Mon projet dispose maintenant de mon idée que j’avais développée en parallèle. 
Tous les commits de ma branche se retrouvent fusionnés dans la branche principale.

Vous pouvez même créer une sous-branche à partir d’une branche !

Pour voir toutes vos branches, tapez ceci :
-------------------------------------------
	git branch

Créez une branche pour toute modification que vous vous apprêtez à faire et qui risque d’être un peu longue.
Au pire, si votre modification est plus courte que prévu, vous aurez créé une branche « pour pas grand-chose », 
mais c’est toujours mieux que de se rendre compte de l’inverse.

Créer une branche et changer de branche
	git branch options_membres
	
Cela crée une branche appelée « options_membres ». 
Il est important de noter que cette branche est locale : 
vous seuls y avez accès 
(il est néanmoins possible de publier une branche pour que d’autres personnes puissent vous aider, 
mais ce n’est pas le but !).

Changer de branche
===================
	git checkout 
	
		git checkout
			est utilisé pour changer de branche mais aussi 
			pour restaurer un fichier tel qu’il était lors du dernier commit. 
			La commande a donc un double usage.

Pour aller sur la branche « options_membres », tapez ceci :
	git checkout options_membres
	
Qu’est-ce qui se passe lorsque l’on change de branche ? 
En fait, vous ne changez pas de dossier sur votre disque dur, mais Git change vos fichiers pour qu’ils reflètent l’état 
de la branche dans laquelle vous vous rendez. 
Imaginez que les branches dans Git sont comme des dossiers virtuels : vous « sautez » de l’un à l’autre avec la commande
git checkout. 
Vous restez dans le même dossier, mais Git modifie les fichiers qui ont changé entre la branche où vous étiez 
et celle où vous allez.

Maintenant, supposons qu’un bug important ait été détecté sur votre site et que vous deviez le régler immédiatement. 
Revenez sur la branche « master », branche principale du site :
	git checkout master
Faites vos modifications, un commit, éventuellement un push s’il faut publier les changements de suite, etc.

Ensuite, revenez à votre branche :
	git checkout options_membres
	
Fusionner les changements
===========================
Lorsque vous avez fini de travailler sur une branche et que celle-ci est concluante, il faut « fusionner » 
Supposons que vous ayez fini votre travail dans la branche « options_membres » et que vous vouliez maintenant 
le publier. 
Pour cela, il faut fusionner le contenu de la branche « options_membres » dans la branche principale « master ».
Rendez-vous d’abord dans la branche « master » :
	git checkout master
Demandez ensuite à y intégrer le travail que vous avez fait dans « options_membres » :
	git merge options_membres
Tous vos commits de la branche « options_membres » se retrouvent maintenant dans « master » ! 

Supprimer  branche
===================

Votre branche « options_membres » ne servant plus à rien, vous pouvez la supprimer :

	git branch -d options_membres

Tagger une version
====================
Il est possible de donner un alias à un commit précis pour le référencer sous ce nom. 
C’est utile par exemple pour dire « À tel commit correspond la version 1.3 de mon projet ». 
Cela permettra à d’autres personnes de repérer la version 1.3 plus facilement. 
C’est justement le rôle des tags.	
