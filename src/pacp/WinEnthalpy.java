/*
 * - PAC-Tool - 
 * Tool for understanding basics and computation of PAC (Pompe à Chaleur)
 * Copyright (C) 2016 christian.klugesherz@gmail.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (version 2)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package pacp;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.JFrame;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Point;
import javax.swing.border.BevelBorder;
import javax.swing.SwingConstants;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;

import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JCheckBox;
import javax.swing.JRadioButton;


public class WinEnthalpy {
	/*
	 *  	STATIC GLOBAL VAR
	 */
	public static PanelEnthalpie panelEnthalpyDrawArea;

	/* 	
	 * 		INSTANCE VAR
	 */
	private Enthalpy enthalpy;
	private JFrame frame;
	private JLabel lblMouseCoordinate;
	private JLabel lblEnthalpyCoord;
	private JLabel lblPressureCoord;
	private JLabel lblTempCoord;
	private JLabel lblOther;
	private JRadioButton rdbtnSaturation;
	private JRadioButton rdbtnNothin;


	// -------------------------------------------------------
	// 						CONSTRUCTOR
	// -------------------------------------------------------

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					WinEnthalpy window = new WinEnthalpy(new Enthalpy());
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public WinEnthalpy(Enthalpy vconfEnthalpy) {
		enthalpy = vconfEnthalpy;
		enthalpy.loadPTFile();
		enthalpy.loadSatFile();
		initialize();
	}

	// -------------------------------------------------------
	// 							METHOD
	// -------------------------------------------------------
	/**
	 * Get the frame visible
	 */
	public void WinEnthalpieVisible() {
		frame.setVisible(true);
	}

	// -------------------------------------------------------
	// 				 GENERATED BY WIN BUILDER
	//	Except special functions : paintComponent, @Override Mouse events
	// -------------------------------------------------------
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setTitle("Diagramme Enthalpique");
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage(WinEnthalpy.class.getResource("/pacp/images/PAC-Tool_32.png")));
		frame.setBounds(100, 100, 800, 500);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout(0, 0));

		JPanel panelEnthalpyBottom = new JPanel();
		frame.getContentPane().add(panelEnthalpyBottom, BorderLayout.SOUTH);

		lblMouseCoordinate = new JLabel("Mouse Coordinate");
		lblMouseCoordinate.setHorizontalAlignment(SwingConstants.RIGHT);
		lblMouseCoordinate.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));

		MouseAdapter ma = new MouseAdapter() {
			@Override
			public void mouseMoved(MouseEvent m) {
				lblMouseCoordinate.setText(String.format("(x: %d y: %d)", m.getX(), m.getY()));

				double hResult = panelEnthalpyDrawArea.getHoX(m.getX());
				lblEnthalpyCoord.setText(String.format("H=%.2f kJ/kg",hResult));

				double pResult = panelEnthalpyDrawArea.getPoY(m.getY());
				lblPressureCoord.setText(String.format("P=%.2f bar",pResult));

				double tRresult = enthalpy.convP2T(pResult);
				lblTempCoord.setText(String.format("T=%.2f °C",tRresult));	

				if (rdbtnSaturation.isSelected()) {
					//lblOther.setText(String.format("H=%.2f P=%.2f",hResult,enthalpy.convSatH2P(hResult,-5)));
				} else {
					lblOther.setText(String.format("----------"));
				}

				try {
					if (WinPressTemp.panelTempPressDrawArea.isVisible()) {
						WinPressTemp.panelTempPressDrawArea.spotTempPressFollower(tRresult,pResult);
					}
				} catch (NullPointerException e) {

				}
			}
		};
		panelEnthalpyBottom.setLayout(new GridLayout(0, 5, 0, 0));

		lblEnthalpyCoord = new JLabel("Enthalpy Coordinate");
		lblEnthalpyCoord.setHorizontalAlignment(SwingConstants.CENTER);
		lblEnthalpyCoord.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelEnthalpyBottom.add(lblEnthalpyCoord);

		lblPressureCoord = new JLabel("Pressure Coordinate");
		lblPressureCoord.setHorizontalAlignment(SwingConstants.CENTER);
		lblPressureCoord.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelEnthalpyBottom.add(lblPressureCoord);

		lblTempCoord = new JLabel("Temperature Coordinate");
		lblTempCoord.setHorizontalAlignment(SwingConstants.CENTER);
		lblTempCoord.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelEnthalpyBottom.add(lblTempCoord);

		lblOther = new JLabel("New label");
		lblOther.setHorizontalAlignment(SwingConstants.CENTER);
		lblOther.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelEnthalpyBottom.add(lblOther);

		panelEnthalpyBottom.add(lblMouseCoordinate);

		JPanel panelEnthalpyRight = new JPanel();
		panelEnthalpyRight.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		frame.getContentPane().add(panelEnthalpyRight, BorderLayout.EAST);
		panelEnthalpyRight.setLayout(new GridLayout(0, 1, 0, 0));

		panelEnthalpyDrawArea = new PanelEnthalpie(enthalpy, ma);	
		panelEnthalpyDrawArea.setBackground(Color.WHITE);

		panelEnthalpyDrawArea.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		frame.getContentPane().add(panelEnthalpyDrawArea, BorderLayout.CENTER);

		JPanel panelHight = new JPanel();
		panelEnthalpyRight.add(panelHight);
		panelHight.setLayout(new BoxLayout(panelHight, BoxLayout.Y_AXIS));

		JButton btnH0 = new JButton("H0");
		btnH0.setMaximumSize(new Dimension(85, 23));
		btnH0.setAlignmentX(Component.CENTER_ALIGNMENT);
		btnH0.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

			}
		});
		panelHight.add(btnH0);

		JButton H1 = new JButton("H1");
		H1.setMaximumSize(new Dimension(85, 23));
		H1.setAlignmentX(Component.CENTER_ALIGNMENT);
		H1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

			}
		});
		panelHight.add(H1);

		JPanel panelMiddle = new JPanel();
		panelEnthalpyRight.add(panelMiddle);
		panelMiddle.setLayout(new BorderLayout(0, 0));

		JButton btnPressureTemp = new JButton("Pres/Temp");
		btnPressureTemp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				WinPressTemp window = new WinPressTemp(enthalpy);
				window.WinPressTempVisible();
			}
		});
		panelMiddle.add(btnPressureTemp, BorderLayout.SOUTH);

		JPanel panel = new JPanel();
		panelEnthalpyRight.add(panel);
		panel.setLayout(null);

		ButtonGroup btGroupPosFollower = new ButtonGroup();

		rdbtnSaturation = new JRadioButton("Saturation");
		rdbtnSaturation.setFont(new Font("Tahoma", Font.PLAIN, 10));
		rdbtnSaturation.setBounds(6, 32, 71, 23);
		panel.add(rdbtnSaturation);
		btGroupPosFollower.add(rdbtnSaturation);

		rdbtnNothin = new JRadioButton("Nothing");
		rdbtnNothin.setSelected(true);
		rdbtnNothin.setFont(new Font("Tahoma", Font.PLAIN, 10));
		rdbtnNothin.setBounds(6, 58, 71, 23);
		panel.add(rdbtnNothin);
		btGroupPosFollower.add(rdbtnNothin);

		JPanel panelBottom = new JPanel();
		panelEnthalpyRight.add(panelBottom);
		panelBottom.setLayout(new BorderLayout(0, 0));

		JButton btnClear = new JButton("Effacer");
		panelBottom.add(btnClear, BorderLayout.SOUTH);
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				panelEnthalpyDrawArea.clean();
			}
		});
	}

	// ===================================================================================================================
	//												JPANEL Display
	// ===================================================================================================================

	public class PanelEnthalpie extends JPanel implements MouseWheelListener, MouseListener, MouseMotionListener {

		private static final long serialVersionUID = 1L;	

		/* -----------------------------
  		      Instance Variables
		 * ----------------------------*/
		private Enthalpy enthalpy;
		private BufferedImage image;

		/* -----------------------------
		        Internal Variables
		 * ----------------------------*/
		Point offset = new Point();			// Supplementary Offset
		double mvoYf = 100.0;				// Move Y factor: Move the mouse of 50 pixels, will corresponds to 0.5 
		Point dragStart = new Point();		// Start point for Offset computation
		double zoom = 1;					// Supplementary Zoom Factor

		// Enthalpy
		double xmin = 140;  				// Minimum of the range of values displayed.
		private double xmax = 520;    		// Maximum of the range of value displayed.

		// Pressure 
		double ymin = 0.1;  						// Minimum of the range of Pressure value
		double ymax = 60;     						// Maximum of the range of Pressure value. 
		double log10_ymin = Math.log10(ymin);  		// Minimum of the range of values displayed. --> Math.log10(0.01) = -1
		double log10_ymax = Math.log10(ymax);     	// Maximum of the range of value displayed. --> Math.log10(100) = 2

		// Supplementary margin on both sides of the display relative to the scale used !!
		double marginx = 20;
		double marginy = 3;
		double log10_marginy = Math.log10(marginy);

		// Grid
		double gridUnitX = 20;	// Enthalpy Step
		double gridUnitY = 1;	// Pressure Step, will be modified following the progression 

		// Zoom
		double zoomx,zoomy;		// Zoom factor relative to the figure to display and the panel width

		private double curveFollowerX,curveFollowerY;


		// -------------------------------------------------------
		// 						CONSTRUCTOR
		// -------------------------------------------------------
		public PanelEnthalpie(Enthalpy vconfEnthalpy, MouseAdapter ma) {
			enthalpy = vconfEnthalpy;
			openEnthalpyImageFile();
			setBackground(Color.WHITE);

			addMouseWheelListener(this);
			addMouseListener(this);
			addMouseMotionListener(this);
			addMouseMotionListener(ma);
		}

		// -------------------------------------------------------
		// 							METHOD
		// -------------------------------------------------------

		/** 
		 * Clean the screen
		 */
		public void clean() {
			repaint();
		}

		/**
		 * Compute Enthalpy H / mouse coordinate
		 * @param x
		 * @return
		 */
		public double getHoX(int x) {
			double xh;
			xh = (xmin-xmax-2*marginx)/(2*zoom) + x/zoomx + (xmin+xmax)/2 - offset.x ; 
			return xh;
		}

		/**
		 * Compute Pressure P / mouse coordinate
		 * @param y
		 * @return
		 */
		public double getPoY(int y) {
			double yP;
			yP= (log10_ymax-log10_ymin)/(2*zoom)+log10_marginy/zoom-y/zoomy+(log10_ymin+log10_ymax)/2 + offset.y/mvoYf;
			yP = Math.exp(yP*Math.log(10));			
			return yP;
		}

		// EnthalpyImageFile
		public void openEnthalpyImageFile() {
			try {
				File file = new File(enthalpy.getEnthalpyImageFile());
				image = ImageIO.read(file);	
			} catch (IOException e) {
				System.out.println("Image non trouvée !");
				e.printStackTrace(); 
			}
		}

		// -------------------------------------------------------
		// 						PAINT 
		// -------------------------------------------------------
		@Override
		public void paintComponent(Graphics g)	{

			Graphics2D g2d = (Graphics2D) g.create();
			super.paintComponent(g);

			// -----------------------------------
			// Apply a translation so that the drawing
			// coordinates on the display matches the Panel
			// -----------------------------------
			zoomx = getWidth()/(xmax-xmin+2*marginx)*zoom;
			zoomy = getHeight()/(log10_ymax-log10_ymin+2*log10_marginy)*zoom;
			g2d.translate(getWidth()/2,getHeight()/2);
			g2d.scale(zoomx, -zoomy);
			g2d.translate(offset.x-(xmax+xmin)/2, -offset.y/mvoYf-(log10_ymax+log10_ymin)/2);

			// -----------------------------------
			// Base font + Scaled font 
			// -----------------------------------
			Font font = new Font(null, Font.PLAIN, 1);
			Font fontReal = font.deriveFont(AffineTransform.getScaleInstance(1/zoomx, -1/zoomy));
			FontMetrics metrics;

			// -----------------------------------
			// Grid + Text
			// -----------------------------------

			// Enthalpy
			fontReal = fontReal.deriveFont(Font.PLAIN, 12.0f);
			g2d.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		

			g2d.setStroke(new BasicStroke((float)0));
			int xposmax=0;
			for (int x = (int) xmin; x <= (int)xmax; x=(int)(x+gridUnitX)) {
				g2d.setColor(Color.lightGray);	
				g2d.draw( new Line2D.Double(x,log10_ymin,x,log10_ymax));	

				g2d.setColor(Color.blue);
				String s = String.format("%d",x);
				int xd = (int) (x - metrics.getStringBounds(s,g2d).getWidth()/2); 
				g2d.drawString(s, (float)xd, (float)(log10_ymin-log10_marginy/2));
				xposmax = x;
			}

			fontReal = fontReal.deriveFont(Font.PLAIN, 10.0f);
			g2d.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			g2d.drawString("H(kJ/kg)", 
					(float) (xposmax-metrics.getStringBounds("H(kJ/kg)",g2d).getWidth()/2), 
					(float) (log10_ymin-log10_marginy+0.05 ));


			// Pressure
			fontReal = fontReal.deriveFont(Font.PLAIN, 10.0f);
			g2d.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			int yposmax=0;

			g2d.setStroke(new BasicStroke(0));
			for (int y = (int) ymin; y <= (int)ymax; y= (int)(y+gridUnitY)) {
				if (y < 6) 
					gridUnitY = 1;
				else if ((y>=6) && (y<10) )
					gridUnitY = 2;
				else if ((y>=10) && (y<30) )
					gridUnitY = 5;
				else if ((y>=30) && (y<50) )
					gridUnitY = 10;
				else
					gridUnitY = 20;

				double log10_y = Math.log10(y); 
				g2d.setColor(Color.lightGray);	
				g2d.draw( new Line2D.Double(xmin-2,log10_y,xmax,log10_y));

				g2d.setColor(Color.blue);
				String s = String.format("%d",y);
				double xd = xmin-marginx/2 - metrics.getStringBounds(s,g2d).getWidth()/2; 
				g2d.setColor(Color.blue);
				g2d.drawString(s, (float)(xd), (float)(log10_y));
				yposmax = y;
			}
			g2d.drawString("P(bar)", 
					(float)(xmin-marginx/2 - metrics.getStringBounds("P(bar)",g2d).getWidth()/2), 
					(float)(Math.log10(yposmax+gridUnitY)));

			// -----------------------------------
			// Curve
			// -----------------------------------		
			g2d.setStroke(new BasicStroke((float) 0));
			g2d.setColor(Color.red);
			for(int i=1;i<enthalpy.getlistSatHlP().size();i++) {
				g2d.draw( new Line2D.Double(enthalpy.getSatHl(i-1),Math.log10(enthalpy.getSatP(i-1)),enthalpy.getSatHl(i),Math.log10(enthalpy.getSatP(i))));			 
				g2d.draw( new Line2D.Double(enthalpy.getSatHv(i-1),Math.log10(enthalpy.getSatP(i-1)),enthalpy.getSatHv(i),Math.log10(enthalpy.getSatP(i))));
			}

			// -----------------------------------
			// Follow the graph based on Eclipse
			// The Ellipse2D class define an ellipse that is defined by a framing rectangle
			// -----------------------------------
			g2d.setStroke(new BasicStroke(0.03f));
			g2d.setColor(Color.blue);
			g2d.draw( new Ellipse2D.Double(curveFollowerX, Math.log10(curveFollowerY), 2, Math.log10(1.1))); 
			//System.out.println("curveFollowerX="+curveFollowerX+"  curveFollowerY="+curveFollowerY);
			//System.out.println();

			// -----------------------------------
			// Other Text, Abscissa /Ordinate
			// -----------------------------------
			g2d.setStroke(new BasicStroke(0));

			// Title
			fontReal = fontReal.deriveFont(Font.BOLD, 16.0f);
			g2d.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			g2d.drawString(enthalpy.getNameRefrigerant(), 
					(float)((xmax-marginx - metrics.getStringBounds(enthalpy.getNameRefrigerant(),g2d).getWidth())), 
					(float)(log10_ymax+log10_marginy/2));

			// Temperature
			fontReal = fontReal.deriveFont(Font.PLAIN, 10.0f);
			g2d.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			g2d.setColor(Color.red);
			for (int y = (int) enthalpy.convP2T(ymin); y <= (int)enthalpy.convP2T(ymax); y= (int)(y+gridUnitY)) {
				if (y < 60) 
					gridUnitY = 10;
				else
					gridUnitY = 20;

				String s = String.format("%d",y);

				double xd = 10 + xmin - metrics.getStringBounds(s,g2d).getWidth()/2; 
				double log10_y = Math.log10(enthalpy.convT2P(y)); 
				g2d.drawString(s, (float)(xd), (float)(log10_y));

				g2d.draw( new Line2D.Double(xmin-2,log10_y,xmin+2,log10_y));
			}
			g2d.drawString("T(°C)", (float)(10 + xmin - metrics.getStringBounds("T(°C)",g2d).getWidth()/2), (float)(Math.log10(yposmax+gridUnitY)));

		}
		
		// -------------------------------------------------------
		// 						EVENT LISTNER
		// -------------------------------------------------------

		@Override
		public void mousePressed(MouseEvent evt) {
			int xMouse = evt.getX();
			int yMouse = evt.getY();

			this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

			if ((evt.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
				dragStart.x = xMouse-offset.x;
				dragStart.y = yMouse-offset.y;
			}
			
			Graphics g = getGraphics();
			Graphics2D g2 = (Graphics2D)g;

			//Point
			g2.setColor(Color.RED);
			g2.fillOval( xMouse-5, yMouse-5, 10, 10 );
			g2.setColor(Color.BLACK);
			g2.drawOval( xMouse-5, yMouse-5, 10, 10 );
			g2.setColor(Color.RED);
			g2.fillOval( xMouse-5, yMouse-5, 10, 10 );
			g2.setColor(Color.BLACK);
			g2.drawOval( xMouse-5, yMouse-5, 10, 10 );	

		}

		@Override
		public void mouseDragged(MouseEvent evt) {
			if ((evt.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
				offset.x = (evt.getX() - dragStart.x);
				offset.y = (evt.getY() - dragStart.y);
				this.repaint();
			}
		}

		@Override
		public void mouseWheelMoved(MouseWheelEvent evt) {
			zoom -= evt.getPreciseWheelRotation() * .03;
			if (zoom < 0) zoom = 0;
			this.repaint();
		}

		@Override
		public void mouseMoved(MouseEvent evt) {

			if (rdbtnSaturation.isSelected()) {
				double lH = getHoX(evt.getX());
				double lPApprox = getPoY(evt.getY());
				double lPDeltaZone; 
				if (lPApprox < 5) 
					lPDeltaZone = 2;
				else if ((lPApprox>=5) && (lPApprox<10) )
					lPDeltaZone = 5;
				else if ((lPApprox>=10) && (lPApprox<20) )
					lPDeltaZone = 7;
				else if ((lPApprox>=20) && (lPApprox<40) )
					lPDeltaZone = 10;
				else
					lPDeltaZone = 20;
				
				// P saturation = f(H,approximP,deltaPZone)
				double lP = enthalpy.convSatH2P(lH,lPApprox,lPDeltaZone);
				curveFollowerX = lH;
				curveFollowerY = lP;
			}
			this.repaint();
		}		

		@Override
		public void mouseClicked(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseEntered(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseExited(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		// -------------------------------------------------------
		// 					GETTER AND SETTER
		// -------------------------------------------------------
		
		public void setCurveFollowerX(double curveFollowerX) {
			this.curveFollowerX = curveFollowerX;
		}

		public void setCurveFollowerY(double curveFollowerY) {
			this.curveFollowerY = curveFollowerY;
		}
	}
}
