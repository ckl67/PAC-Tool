/*
 * - PAC-Tool - 
 * Tool for understanding basics and computation of PAC (Pompe Ã  Chaleur)
 * Copyright (C) 2016 christian.klugesherz@gmail.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (version 2)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package gui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JFrame;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.FontMetrics;
import javax.swing.border.MatteBorder;

import refrigerant.Refrigerant;

import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class PressTempWin extends JFrame {

	private static final long serialVersionUID = 1L;

	/* 	----------------------------------------
	 * 		INSTANCE VAR
	 * ----------------------------------------*/
	private Refrigerant rfg;

	/* 	----------------------------------------
	 * 		WIN BUILDER
	 * ----------------------------------------*/
	public PressTempPanel panelTempPressDrawArea;


	private JLabel lblTempPressGas;
	private JLabel lblTempPressLiquid;

	// -------------------------------------------------------
	// 				TEST THE APPLICATION STANDALONE 
	// -------------------------------------------------------
	/**
	 * Launch the application for local test
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Refrigerant refrigerant =  new Refrigerant(
							"./ressources/R407/R407C/R407C Dupont-Suva Saturation Table.txt",
							"./ressources/R407/R407C/R407C Dupont-Suva IsoTherm Table.txt");

					PressTempWin window = new PressTempWin(refrigerant);
					window.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	
	// -------------------------------------------------------
	// 						CONSTRUCTOR
	// -------------------------------------------------------
	/**
	 * Create the application.
	 */
	public PressTempWin(Refrigerant vrfg)  {
		rfg = vrfg;
		initialize();
	}

	// -------------------------------------------------------
	// 							METHOD
	// -------------------------------------------------------

	public PressTempPanel getPanelTempPressDrawArea() {
		return panelTempPressDrawArea;
	}

	// -------------------------------------------------------
	// 				 GENERATED BY WIN BUILDER
	//	Except special functions : paintComponent, @Override Mouse events
	// -------------------------------------------------------
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {

		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent arg0) {
			}
		});
		setIconImage(Toolkit.getDefaultToolkit().getImage(PressTempWin.class.getResource("/gui/images/PAC-Tool_16.png")));
		setTitle("Relation Temp\u00E9rature Pression");
		setBounds(100, 100, 450, 400);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(new BorderLayout(0, 0));

		JPanel panelValue = new JPanel();
		getContentPane().add(panelValue, BorderLayout.SOUTH);
		panelValue.setLayout(new GridLayout(0, 2, 0, 0));

		lblTempPressLiquid = new JLabel("P");
		lblTempPressLiquid.setBorder(new MatteBorder(2, 1, 1, 1, (Color) Color.LIGHT_GRAY));
		lblTempPressLiquid.setHorizontalAlignment(SwingConstants.CENTER);
		panelValue.add(lblTempPressLiquid);

		lblTempPressGas = new JLabel("T");
		lblTempPressGas.setBorder(new MatteBorder(2, 1, 1, 1, (Color) Color.LIGHT_GRAY));
		lblTempPressGas.setHorizontalAlignment(SwingConstants.CENTER);
		panelValue.add(lblTempPressGas);

		panelTempPressDrawArea = new PressTempPanel();
		getContentPane().add(panelTempPressDrawArea, BorderLayout.CENTER);
	}

	// ===================================================================================================================
	//												JPANEL Display
	// ===================================================================================================================

	public class PressTempPanel extends JPanel implements MouseListener, MouseMotionListener, KeyListener {
		private static final long serialVersionUID = 1L;
		
		// Supplementary margin on both sides of the display
		private double marginx = 15;
		private double marginy = 10;

		// Grid
		private int gridUnitX = 5;
		private int gridUnitY = 5;

		// Temperature
		private double xmin = -60;  	// Minimum of the range of values displayed.
		private double xmax = 90;     // Maximum of the range of value displayed.

		// Pressure 
		private double ymin = 0.5;  		// Minimum of the range of values displayed.
		private double ymax = 90;     	// Maximum of the range of value displayed.
		
		private double zoomx,zoomy;

		private double posX,posY;
		
		private int keyCodePressed;
		
		// -------------------------------------------------------
		// 						CONSTRUCTOR
		// -------------------------------------------------------
		public PressTempPanel() {
			addMouseListener(this);
			addMouseMotionListener(this);	
			addKeyListener(this);

			this.setFocusable(true);
			this.requestFocusInWindow();
		}
		
		
		// -------------------------------------------------------
		// 						PAINT 
		// -------------------------------------------------------

		public void paintComponent(Graphics g) {  
			Graphics2D g2 = (Graphics2D)g;
		
			super.paintComponent(g);
			setBackground(Color.WHITE);
		
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

			// -----------------------------------
			// Apply a translation so that the drawing 
			// coordinates on the display matches the Panel
			// -----------------------------------
			zoomx=getWidth()/(xmax-xmin+2*marginx);
			zoomy= getHeight()/(ymax-ymin+2*marginy);
			g2.translate(getWidth()/2,getHeight()/2);
			g2.scale(zoomx, -zoomy);
			g2.translate(-(xmax+xmin)/2, -(ymax+ymin)/2);
		
			// -----------------------------------
			// Base font + Scaled font 
			// -----------------------------------
			Font font = new Font(null, Font.PLAIN, 1);
			Font fontReal = font.deriveFont(AffineTransform.getScaleInstance(1/zoomx, -1/zoomy));
			FontMetrics metrics;

			// -----------------------------------
			// Grid
			// -----------------------------------
			g2.setColor(Color.lightGray);
			double pixelWidth = (xmax-xmin+2*marginx)/getWidth();  
			g2.setStroke(new BasicStroke((float) pixelWidth));
			for (int x = (int) xmin; x <= xmax; x=x+gridUnitX) 
				g2.draw( new Line2D.Double(x,ymin,x,ymax));			
		
			double pixelHeight = (ymax-ymin+2*marginy)/getHeight();		
			g2.setStroke(new BasicStroke((float) pixelHeight));
			for (int y = (int) ymin; y <= ymax; y=y+gridUnitY)			
				g2.draw( new Line2D.Double(xmin,y,xmax,y));
		
			// -----------------------------------
			// Axes
			// -----------------------------------
			g2.setColor(Color.blue);
			g2.setStroke(new BasicStroke((float) (2*pixelWidth)));
		
			g2.draw( new Line2D.Double(xmin,0,xmax,0));
			g2.draw( new Line2D.Double(0,ymin,0,ymax));	
		
			// -----------------------------------
			// Text  Abscissa /Ordinate
			// -----------------------------------
			g2.setStroke(new BasicStroke(0));
			
			// Title
			fontReal = fontReal.deriveFont(Font.BOLD, 14.0f);
			g2.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			g2.drawString(rfg.getRfgName(), 
					(float)((xmax-marginx - metrics.getStringBounds(rfg.getRfgName(),g2).getWidth())), 
					(float)(ymax+marginy/4));
			
			// Text
			fontReal = fontReal.deriveFont(Font.PLAIN, 12.0f);
			g2.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		
			g2.setColor(Color.blue);
			g2.drawString("T", (int) (xmax+metrics.stringWidth("T")), (int) (0));
			g2.drawString("P", (int) (0), (int) (ymax)+metrics.stringWidth("P"));
		
			// Coordinate
			fontReal = fontReal.deriveFont(Font.PLAIN, 12.0f);
			g2.setFont(fontReal);
			metrics = g.getFontMetrics(fontReal);		

			g2.setColor(Color.lightGray);
			String s;
			for (int x = (int) xmin; x <= xmax; x=x+2*gridUnitX) {
				s = String.format("%d",x);
				int xd = x - metrics.stringWidth(s)/ 2;  			    
				g2.drawString(s, xd, (int)-marginy/2);
			}
		
			for (int y = (int) ymin; y <= ymax; y=y+2*gridUnitY) {
				s = String.format("%d",(int)y);
				int yd = y - metrics.stringWidth(s)/ 2;  
				g2.drawString(s, (int) (xmin-marginx/2), (int) (yd));			
			}
		
			// -----------------------------------
			// Curve
			// -----------------------------------		
			g2.setColor(Color.red);
			g2.setStroke(new BasicStroke(0.5f));
			for(int i=1;i<rfg.getSatTableSize();i++) {
				g2.draw( new Line2D.Double(rfg.getTSat(i-1),rfg.getPSat_Liquid(i-1),rfg.getTSat(i),rfg.getPSat_Liquid(i)));			 
			}
			
			g2.setColor(Color.green);
			g2.setStroke(new BasicStroke(0.5f));
			for(int i=1;i<rfg.getSatTableSize();i++) {
				g2.draw( new Line2D.Double(rfg.getTSat(i-1),rfg.getPSat_Gas(i-1),rfg.getTSat(i),rfg.getPSat_Gas(i)));			 
			}

			// Follow the graph based on Eclipse
	        g2.setPaint(Color.BLUE);
	        g2.fill (new Ellipse2D.Double(posX-3/2, posY-3/2, 3, 3));
		}

		// -------------------------------------------------------
		// 					ALL OVERRIDE METHODS
		// -------------------------------------------------------

		@Override
		public void mouseDragged(MouseEvent arg0) {
			// TODO Auto-generated method stub
		}

		public void spotTempPressFollower(double temp) {
			String s;
			
			if (keyCodePressed == 16) {
				lblTempPressLiquid.setForeground(Color.GRAY);
				lblTempPressGas.setForeground(Color.BLACK);
			} else {
				lblTempPressLiquid.setForeground(Color.BLACK);
				lblTempPressGas.setForeground(Color.GRAY);
			}
			
			s = "T: %.2fÂ°C --> P:%.2fbar(gas)";
			lblTempPressGas.setText(String.format(s, temp,rfg.getPSatFromT(temp).getPGas() ));

			s = "T: %.2fÂ°C --> P:%.2fbar(liq)";
			lblTempPressLiquid.setText(String.format(s, temp,rfg.getPSatFromT(temp).getPLiquid() ));
			//lblTempPressLiquid.setText(String.format(s,press ,rfg.getTSatFromP(press) ));
			
			posX = temp;
			if (keyCodePressed == 16)
				posY = rfg.getPSatFromT(temp).getPGas();
			else
				posY = rfg.getPSatFromT(temp).getPLiquid();
			
			repaint();
		}
		
		@Override
		public void mouseMoved(MouseEvent m) {
			//spotTempPressFollower(m.getX()/zoomx+xmin-marginx, -m.getY()/zoomy+marginy+ymax);
			spotTempPressFollower(m.getX()/zoomx+xmin-marginx);
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
		}

		@Override
		public void keyPressed(KeyEvent e) {
	        keyCodePressed = e.getKeyCode();
		}

		@Override
		public void keyReleased(KeyEvent arg0) {
	        keyCodePressed = 0;
		}

		@Override
		public void keyTyped(KeyEvent arg0) {
			// TODO Auto-generated method stub
		}

	}

}
